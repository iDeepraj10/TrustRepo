Pseudocode


- Load dataset into df

- Convert it into array df1

- Create M_ratings for getting customers with nan values alongwith serices

Functions used :

def median(service):
    median_values = df.median()
    x = median_values[service]
    return x

def rating(customer,service):
    return df1[customer][service]


#function returns weight of a customer for specific service
def weight(c,s):
    Central_point = median(s)
    #print(Central_point)
    Rating = rating(c,s)
    Weight = (1 - abs((Central_point - Rating))/10)
    return Weight

def predict(C,S):
    W = weight(C,S)
    R = rating(C,S)
    M_rate = W * R 
    return M_rate

def similarity(c1,c2):
	temp_set []
	count = 1
	for i,j in row c1,c2 of matrix df1
		count+=1
		if c1[i] or c2[i] has NaN
			continue
		temp_set = count (to get common rated service)	

	cmp_set1 = []
	cmp_set2 = []
	for service in temp_set
		cmp_set1 = df1[c1][service]
		cmp_set2 = df1[c2][service]	

	cos_sim = cosine similarity of c2 & c2
	return cos_sim	

- Main Sub-program :

res = 0 
sum1 = 0
for rate in M_ratings:
	sim_mat = {}
	for cus in df1:
		x = simlarity(customer,service)
		sim_mat[cus[0]] = x
	sim_cus = sort(sim_mat)
	count = 0
	for i in sim_cus:
		count += 1
		res = predict(i,rate[1])
		if res is Nan
			contine
		sum1 = sum1 + res
		if count == 10
			break
	sum1 = sum1 / 10
	sum1 = round(sum1)
	df1[rate[0]][rate[1]] = sum1				


- Save the matrix dfi to a csv file